
int redirect_stdin(char **args, int iterator)
{
	int fileHandle;
	
	printf("attempting to open: %s\n",args[iterator]);
	
	close(0);	
	
	fileHandle = open(args[iterator], O_RDONLY);
	REDIRECT_TYPE = 1;		
	return fileHandle;
}

int redirect_stdout(char **args, int iterator)
{
	int fileHandle;
	
	printf("attempting to open: %s\n",args[iterator]);

	close(1);
	//, S_IWUSR | S_IRUSR not available in mtx

	fileHandle = open(args[iterator], O_WRONLY | O_CREAT); 
	REDIRECT_TYPE = 2;
   return fileHandle;	
}

int redirect_stdout_append(char **args, int iterator)
{
	int fileHandle;
	
	printf("attempting to open: %s\n",args[iterator]);
	
	close(1);
	
	fileHandle = open(args[iterator], O_WRONLY | O_APPEND | O_CREAT);
	REDIRECT_TYPE = 3;	
	return fileHandle;
}


int doRedirection(char **parsedLine)
{
	int i = 0;
	char *line;
	int fd = -1;
	
	printf("made it this far\n");
	
	while(parsedLine[i])
	{
		printf("parsedLine[i]: %s\n", parsedLine[i]);
		if (strcmp(parsedLine[i],"<") == 0)
		{
			fd = redirect_stdin(parsedLine, i+1);		
		}
		else if (strcmp(parsedLine[i],">") == 0)
		{
			fd = redirect_stdout(parsedLine, i+1);
			printf("made it back\n");
		}
		else if (strcmp(parsedLine[i],">>") == 0)
		{
			fd = redirect_stdout_append(parsedLine, i+1);
		}
		
		printf("fd = %d\n", fd);
		if (fd != -1) // redirect has occured
		{		   
			//about to 
		   //dup(fd);
		   line = reappendParsedLine(parsedLine);
		   exec(line);
		}
		i++;
	}
	
	
	
	//exec(line);
}
